#pragma once

#include <Lucky.h>

#include "Lucky/Renderer/EditorCamera.h"

#include "Panels/EditorDockSpace.h"
#include "Panels/SceneHierarchyPanel.h"
#include "Panels/InspectorPanel.h"
#include "Panels/RendererStatsPanel.h"

namespace Lucky
{
    class EditorLayer : public Layer
    {
    private:
        Ref<Framebuffer> m_Framebuffer;     // 帧缓冲区

        Ref<Scene> m_ActiveScene;           // 活动场景
        EditorCamera m_EditorCamera;        // 编辑器相机

        Object m_SquareObject1;             // 正方形物体
        Object m_SquareObject2;             // 正方形物体
        Object m_CameraObject;              // 相机对象

        Object m_PickedObject;              // 被鼠标拾取的物体

        bool m_ViewportFocused = false;     // 视口被聚焦
        bool m_ViewportHovered = false;     // 鼠标悬停在视口

        glm::vec2 m_ViewportSize = { 0.0f, 0.0f };  // 视口大小
        glm::vec2 m_ViewportBounds[2];              // 视口边界（左上角，右下角）

        EditorDockSpace m_EditorDockSpace;          // 停靠空间

        SceneHierarchyPanel m_HierarchyPanel;       // 场景 Hierarchy 面板
        InspectorPanel m_InspectorPanel;            // 资产 Inspector 面板
        RendererStatsPanel m_RendererStatsPanel;    // 渲染器数据统计面板

        int m_GizmoType = -1;   // Gizmo 操作类型 -1无 0平移 1旋转 2缩放
    public:
        EditorLayer();

        virtual ~EditorLayer() = default;

        /// <summary>
        /// 将该层添加到层栈时调用
        /// </summary>
        virtual void OnAttach() override;

        /// <summary>
        /// 将该层从层栈移除时调用
        /// </summary>
        virtual void OnDetach() override;

        /// <summary>
        /// 更新：每帧调用
        /// </summary>
        /// <param name="dt">帧间隔</param>
        virtual void OnUpdate(DeltaTime dt) override;

        /// <summary>
        /// 渲染 ImGui
        /// </summary>
        virtual void OnImGuiRender() override;

        /// <summary>
        /// 事件处理函数
        /// </summary>
        /// <param name="event">事件</param>
        virtual void OnEvent(Event& event) override;

        /// <summary>
        /// 创建新场景
        /// </summary>
        void NewScene();

        /// <summary>
        /// 打开场景
        /// </summary>
        void OpenScene();

        /// <summary>
        /// 场景另存为
        /// </summary>
        void SaveSceneAs();
    private:
        /// <summary>
        /// 按键按下时调用
        /// </summary>
        /// <param name="e">按键按下事件</param>
        /// <returns>处理结果</returns>
        bool OnKeyPressed(KeyPressedEvent& e);

        /// <summary>
        /// 鼠标按钮按下时调用
        /// </summary>
        /// <param name="e">鼠标按钮按下事件</param>
        /// <returns>处理结果</returns>
        bool OnMouseButtonPressed(MouseButtonPressedEvent& e);
    };
}